{"ast":null,"code":"import { ADD_SCORE, EDIT_SCORE } from \"../actions/Actions\";\nimport firebase from '../firebase';\nconst initialState = {\n  victory: []\n};\nconst itemRef = firebase.database().ref('victory');\nconst item = itemRef.on('value', snapshot => {\n  console.log(\"snapshot : \", snapshot);\n  const items = snapshot.val();\n  console.log(items);\n\n  for (var prop in items) {\n    console.log(`obj.${prop} = ${items[prop].victory}`);\n    console.log('yooooooooooooooo');\n  }\n});\n\nfunction sortVictory(a, b) {\n  if (a.tour === -1) {\n    return 1;\n  }\n\n  if (b.tour === -1) {\n    return -1;\n  }\n\n  return a.tour >= b.tour ? 1 : -1;\n}\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case ADD_SCORE:\n      const nextState = { ...state,\n        victory: [...state.victory, action.value].sort(sortVictory)\n      };\n      const itemRef = firebase.database().ref('victory');\n      itemRef.push(action.value);\n      return nextState;\n\n    case EDIT_SCORE:\n      let i = state.victory.length - 1;\n\n      if (state.victory[i].tour > action.value.tour || state.victory[i].tour === -1) {\n        const nextState = { ...state,\n          victory: [...state.victory.filter((value, index) => index !== i), action.value].sort(sortVictory)\n        };\n        const itemRef = firebase.database().ref('victory');\n        itemRef.push(action.value);\n        return nextState;\n      }\n\n      return state;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/RomanCLV/Documents/GitHub/React/td2/src/reducers/Reducer.js"],"names":["ADD_SCORE","EDIT_SCORE","firebase","initialState","victory","itemRef","database","ref","item","on","snapshot","console","log","items","val","prop","sortVictory","a","b","tour","reducer","state","action","type","nextState","value","sort","push","i","length","filter","index"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,OAAOC,QAAP,MAAqB,aAArB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAG;AADO,CAArB;AAIA,MAAMC,OAAO,GAAGH,QAAQ,CAACI,QAAT,GAAoBC,GAApB,CAAwB,SAAxB,CAAhB;AAEA,MAAMC,IAAI,GAAGH,OAAO,CAACI,EAAR,CAAW,OAAX,EAAqBC,QAAD,IAAc;AAC3CC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,QAA3B;AACA,QAAMG,KAAK,GAAGH,QAAQ,CAACI,GAAT,EAAd;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;;AACA,OAAK,IAAIE,IAAT,IAAiBF,KAAjB,EAAwB;AACpBF,IAAAA,OAAO,CAACC,GAAR,CAAa,OAAMG,IAAK,MAAKF,KAAK,CAACE,IAAD,CAAL,CAAYX,OAAQ,EAAjD;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD;AACL,CARW,CAAb;;AAYA,SAASI,WAAT,CAAqBC,CAArB,EAAwBC,CAAxB,EAA2B;AACvB,MAAID,CAAC,CAACE,IAAF,KAAW,CAAC,CAAhB,EAAmB;AACf,WAAO,CAAP;AACH;;AACD,MAAID,CAAC,CAACC,IAAF,KAAW,CAAC,CAAhB,EAAmB;AACf,WAAO,CAAC,CAAR;AACH;;AACD,SAAOF,CAAC,CAACE,IAAF,IAAUD,CAAC,CAACC,IAAZ,GAAmB,CAAnB,GAAuB,CAAC,CAA/B;AACH;;AAED,eAAe,SAASC,OAAT,CAAkBC,KAAK,GAAGlB,YAA1B,EAAwCmB,MAAxC,EAAgD;AAC3D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKvB,SAAL;AACI,YAAMwB,SAAS,GAAG,EACd,GAAGH,KADW;AAEdjB,QAAAA,OAAO,EAAE,CAAC,GAAGiB,KAAK,CAACjB,OAAV,EAAoBkB,MAAM,CAACG,KAA3B,EAAkCC,IAAlC,CAAuCV,WAAvC;AAFK,OAAlB;AAKA,YAAMX,OAAO,GAAGH,QAAQ,CAACI,QAAT,GAAoBC,GAApB,CAAwB,SAAxB,CAAhB;AACAF,MAAAA,OAAO,CAACsB,IAAR,CAAaL,MAAM,CAACG,KAApB;AAEA,aAAQD,SAAR;;AACJ,SAAKvB,UAAL;AACI,UAAI2B,CAAC,GAAGP,KAAK,CAACjB,OAAN,CAAcyB,MAAd,GAAuB,CAA/B;;AACA,UAAIR,KAAK,CAACjB,OAAN,CAAcwB,CAAd,EAAiBT,IAAjB,GAAwBG,MAAM,CAACG,KAAP,CAAaN,IAArC,IAA6CE,KAAK,CAACjB,OAAN,CAAcwB,CAAd,EAAiBT,IAAjB,KAA0B,CAAC,CAA5E,EAA+E;AAC3E,cAAMK,SAAS,GAAG,EACd,GAAGH,KADW;AAEdjB,UAAAA,OAAO,EAAE,CAAC,GAAGiB,KAAK,CAACjB,OAAN,CAAc0B,MAAd,CAAsB,CAACL,KAAD,EAAQM,KAAR,KAAkBA,KAAK,KAAKH,CAAlD,CAAJ,EAA0DN,MAAM,CAACG,KAAjE,EAAwEC,IAAxE,CAA6EV,WAA7E;AAFK,SAAlB;AAIA,cAAMX,OAAO,GAAGH,QAAQ,CAACI,QAAT,GAAoBC,GAApB,CAAwB,SAAxB,CAAhB;AACAF,QAAAA,OAAO,CAACsB,IAAR,CAAaL,MAAM,CAACG,KAApB;AACA,eAAOD,SAAP;AACH;;AACD,aAAOH,KAAP;;AACJ;AACI,aAAOA,KAAP;AAxBR;AA0BH","sourcesContent":["import {ADD_SCORE, EDIT_SCORE} from \"../actions/Actions\"\nimport firebase from '../firebase';\n\nconst initialState = {\n    victory : []\n};\n\nconst itemRef = firebase.database().ref('victory');\n\nconst item = itemRef.on('value', (snapshot) => {\n    console.log(\"snapshot : \", snapshot)\n    const items = snapshot.val();\n    console.log(items)\n    for (var prop in items) {\n        console.log(`obj.${prop} = ${items[prop].victory}`);\n        console.log('yooooooooooooooo')\n      }  \n })\n\n\n\nfunction sortVictory(a, b) {\n    if (a.tour === -1) {\n        return 1;\n    }\n    if (b.tour === -1) {\n        return -1;\n    }\n    return a.tour >= b.tour ? 1 : -1;\n}\n\nexport default function reducer (state = initialState, action) {\n    switch (action.type) {\n        case ADD_SCORE :\n            const nextState = {\n                ...state,\n                victory: [...state.victory , action.value].sort(sortVictory) \n            };\n\n            const itemRef = firebase.database().ref('victory');\n            itemRef.push(action.value);\n\n            return  nextState;\n        case EDIT_SCORE:\n            let i = state.victory.length - 1;\n            if (state.victory[i].tour > action.value.tour || state.victory[i].tour === -1) {\n                const nextState = {\n                    ...state, \n                    victory: [...state.victory.filter( (value, index) => index !== i), action.value].sort(sortVictory) \n                };\n                const itemRef = firebase.database().ref('victory');\n                itemRef.push(action.value);\n                return nextState;\n            }\n            return state;\n        default:\n            return state;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}